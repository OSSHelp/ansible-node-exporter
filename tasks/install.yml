---

- name: create user
  user:
    name: "{{ node_exporter_user_name }}"
    home: "/nonexistent"
    create_home: no
    shell: "/bin/false"
    system: yes

- name: check if binary file exists
  stat:
    path: "{{ node_exporter_dirs.binary_dir }}/{{ node_exporter_binary_name }}"
  register: binary_file

- name: get binary
  block:
    - name: download tar.gz
      get_url:
        url: "{{ node_exporter_targz_url }}"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        checksum: "{{ node_exporter_targz_sums }}"

    - name: "extract binary to {{ node_exporter_dirs.binary_dir }}"
      unarchive:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        dest: "{{ node_exporter_dirs.binary_dir }}"
        owner: root
        group: root
        remote_src: yes
        extra_opts:
          - --strip-components=1
          - "node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"

    - name: remove tar.gz
      file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        state: absent
  when: not binary_file.stat.exists

- name: create systemd unit
  template:
    src: systemd-unit.j2
    dest: "{{ node_exporter_systemd_unit }}"
  notify:
    - reload node_exporter unit
    - restart node_exporter service

- name: ensure that configuration directory exists
  file:
    path: "{{ node_exporter_dirs.config_dir }}"
    state: directory

- name: create exporter configuration file
  template:
    src: exporter-cfg.j2
    dest: "{{ node_exporter_dirs.config_dir }}/{{ node_exporter_config_file }}"
    owner: root
    group: "{{ node_exporter_user_name }}"
    mode: 0640
  notify: restart node_exporter service

- meta: flush_handlers

- name: enable service
  systemd:
    name: "{{ node_exporter_service_name }}"
    enabled: true
